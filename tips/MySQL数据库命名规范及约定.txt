MySQL数据库命名规范及约定
2017年04月15日 21:08:10
阅读数：7799
一、【操作规范】
1. 如无备注，则表中的第一个id字段一定是主键且为自动增长；
2. 如无备注，则数值类型的字段请使用UNSIGNED属性；
3. 如无备注，排序字段order_id在程序中默认使用降序排列；
4. 如无备注，所有字段都设置NOT NULL，并设置默认值；
5. 如无备注，所有的布尔值字段，如is_hot、is_deleted，都必须设置一个默认值，并设为0；
6. 所有的数字类型字段，都必须设置一个默认值，并设为0；
7. 针对varchar类型字段的程序处理，请验证用户输入，不要超出其预设的长度；
8. 建表时将数据字典中的字段中文名和属性备注写入数据表的备注中(“PK、自动增长”不用写)；
9. 如无说明，建表时一律采用innodb引擎；

二、【常用表名约定】
0. 说明：表前缀用项目名称首字母缩写；所以表名都小写，单词之间用下划线分开，单词都用单数形式
1. user – 用户
2. category – 分类
3. goods – 商品、产品等一切可交易网站的物品都用此命名
4. good_gallery – 物品的相册
5. good_cate – 物品的分类，除了单独作为表名，其他地方分类单词一律用缩写cate
4. attr – 属性
5. article – 文章、新闻、帮助中心等以文章形式出现的，一般都用此命名
6. cart – 购物车
7. feedback – 用户反馈
8. order – 订单
9. site_nav – 包括页头和页尾导航
10. site_config – 系统配置表
11. admin – 后台用户 【RBAC标准表】
12. role – 后台用户角色【RBAC标准表】
13. access – 后台操作权限，相当于action【RBAC标准表】
14. role_admin – 后台用户对应的角色【RBAC标准表】
15. access_role – 后台角色对应的权限【RBAC标准表】
16. 待续

三、【常用列名约定】
1. 表名_id – 通常用作外键命名
2. cid – 特殊的编号，带有元数据，方便关联查询，你可以把它理解成类别(层次)编号。举个例子，产品在分类时，往往需要将其归类到子分类下，相应的字段中也一般只记录子分类的id，这时若需要知道该产品属于哪个主分类，就需要通过子分类信息再查询到主分类信息，这是比较麻烦的，cid字段就是要解决这个问题。一般的站点几十个分类肯定是够用了，所以这里假设某一主分类的cid为11，则子分类的cid从1101开始编号，处理时只需截取前两位数值便可知道该产品属于哪一个主分类了。
3. add_time – 添加时间、上架时间等
4. last_time – 最后操作时间，如登录、修改记录
5. expire_time – 过期时间
6. name – 商品名称、商家名称等，不要跟title混用，title只用于文章标题、职称等
7. price – 价格
8. thumb – 只要是列表页面中的窗口图，一律用此命名
9. image_src – 相册中的图片地址一律用此命名，不要出现各种img,image,img_url,thumb_url等
10. head_thumb – 用户头像， 虽然有点长，一定要遵守。不要出现上述情况
11. image_alt – 相册中图片的alt属性
12. desc – 描述、简介，比如goods_desc，不要出现goods_txt这种
13. details – 详情、文章内容等
14. order_id – 排序
15. telephone – 座机号码
16. mobile – 手机号码
17. phone – 当不区分手机和座机时，请用phone命名
18. address – 地址，单独出现不要用addr缩写，组合出现时需用缩写，比如mac地址，mac_addr
19. zipcode – 邮编
20. region – 地区，大的区域，比如记录杭州市、温州市等
21. area – 区域，小的，比如上城区，江干区等
22. avg_cost – 人均消费
23. 待续

四、【数据表字段设计范例】

分类表（t_category）

字段名

列名

类型

属性备注

说明

流水号

id

int(10)

PK、自动增长

特殊编号

cid

varchar(4)

第一个主分类为11、第一个子分类为1101，类推，仅支持二级分类

名称

name

varchar(10)

页面中需注明输入不超过10个字

父分类

pid

int(10)

统计量

count

int(10)

是否热门

is_hot

tinyint(1)

首页显示

is_index

tinyint(1)

排序

order_id

int(10)




 

 [表命名规范]

1.具备统一前缀，对相关功能的表应当使用相同前缀，如acl_xxx，house_xxx,ppc_xxx；其中前缀通常为这个表的模块或依赖主实体对象的名字，通常来讲表名为：业务_动作_类型，或是业务_类型；

2.表名使用英文小写单词，如果有多个单词则使用下划线隔开；

3.表名简介，使用常见单词，避免使用长单词和生僻词；

4.表引擎取决于实际应用场景及当前数据库中的已经存在的存储引擎；日志及报表类表建议用myisam，与交易，审核，金额相关的表建议用innodb引擎。总体来讲数据库默认innodb；

5.数据表必须有主键，且建议均使用auto_increment的id作为主键（与业务无关）,和业务相关的要做为唯一索引；

6.默认使用utf8字符集（由于数据库定义使用了默认，数据表可以不再定义，但为保险起见，建议都写上）；

7.所有的表都必须有备注，写明白这个表中存放的数据内容；

8.预估表数据量，如果数据量较大（超过500w）则需要考虑分表策略。可以等量均衡分表或根据业务规则分表均可。要分表的数据表必须与DBA商量分表策略；

9.职责相近的表，命名规则应该相同；如合同申请，账户信息，交友相关等；

举个例子，一张在线冲值记录表：user_bank_deposit这个就非常符合标准，如果叫做userBankDeposit或是user_chongzhi，就非常不友好。

CREATE TABLE `house_refresh_log` (

  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '自增ID',

  `fangid` int(11) NOT NULL COMMENT '房贴子ID',

  `refresh_time` int(11) NOT NULL COMMENT '刷新时间',

  PRIMARY KEY (`id`),

  UNIQUE KEY `fangid` (`fangid`)

) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='房刷新记录表'

[字段命名规范]

1.数据库字段命名与表名命名类似：

2.使用小写英文单词，如果有多个单词使用下划线隔开；

3.使用简单单词，避免生僻词；

4.字段应当有注释，描述该字段的用途及可能存储的内容，如枚举值则建议将该字段中使用的内容都定义出来；

5.是别的表的外键均使用xxx_id的方式来表明；

6.表的主键一般都约定成为id，自增类型；

7.时间字段，除特殊情况一律采用int来记录unix_timestamp；

8.网络IP字段，除特殊情况一律用bigint来记录inet_aton值；

9.所有字段，均为非空，最好显示指定默认值；

10.有些驱动对tinyint支持不够好，通常建义按容量来选择字段；

11. text字段尽量少用，或是拆到冗余表中；

CREATE TABLE `wanted_post` (

  `id` int(10) NOT NULL AUTO_INCREMENT,

  `puid` int(10) unsigned NOT NULL,

  `user_id` int(10) NOT NULL COMMENT '发贴用户的id',

  `username` varchar(50) NOT NULL COMMENT '发贴用户的用户名',

  `city` smallint(4) NOT NULL COMMENT '所在城市',

  `ip` bigint(14) NOT NULL COMMENT '发帖人的ip',

  `district_id` tinyint(2) NOT NULL COMMENT '所在区域的id',

  `district_name` varchar(20) NOT NULL COMMENT '行政区名字',

  `street_id` tinyint(2) NOT NULL COMMENT '所在街道(地标)的id',

  `street_name` varchar(20) NOT NULL COMMENT '小区名字',

  `title` varchar(255) NOT NULL COMMENT '帖子的标题',

  `description` text NOT NULL COMMENT '帖子详情描述',

  `post_at` int(11) NOT NULL COMMENT '用户发帖时间,数据创建的时间,使用整型存储',

  `refresh_at` int(11) NOT NULL COMMENT '帖子被修改的时间,整型存储',

  `show_time` int(11) NOT NULL COMMENT '帖子显示时间',

  `age_max` int(11) NOT NULL DEFAULT '0' COMMENT '招聘最小年龄',

  `age_min` int(11) NOT NULL DEFAULT '0' COMMENT '招聘最大年龄',

  `post_refresh_at` int(11) NOT NULL COMMENT '刷新时间',

  PRIMARY KEY (`id`),

  UNIQUE KEY `idx_puid` (`puid`),

  KEY `user_id_index` (`user_id`),

  KEY `post_at_index` (`post_at`),

  KEY `refresh_at_index` (`refresh_at`),

  KEY `show_time_index` (`show_time`)

) ENGINE=InnoDB AUTO_INCREMENT=55295 DEFAULT CHARSET=utf8 COMMENT='招聘帖子表'

 

 

 

 

 

 

 

数据库表及字段命名规范

http://blog.csdn.net/yuzhouxiang/article/details/7088352

 

数据库设计表及字段命名规范(我整理的，望大家多多提建议)

1.数据库表命名规范:

(1)表名前应该加上前缀，表的前缀一个用系统或模块的英文名称缩写，前缀全部大写或首字母大写，表名中包含的单词首字母大写。

(2)数据库表名应该有意义，并且易于理解，最好使用可以表达功能的英文单词或缩写，如果用英文单词表示，建议使用完整的英文单词。

(3)表名不可以太长，最好不要超过3个英文单词长度（22个字母）。

(4)在数据库表命名时应该用英文单词的单数形式，如员工表命名：应该为Employee而不是Employees.

(5)如果是后台表命名时应该在表名基础上加上后缀
_b
(back 首字母 )

(6)在表创建完成前，应该为表添加表的注释。

 

2.表字段命名规范：

(1)数据库表字段应该是有意义而且易于理解的，最好是能够表达字段含义的英文字母

（有人认为如果用英文单词作为字段，因为翻译工具不同，而字段不统一建议使用汉语拼音首字母缩写
；有人认为用汉语拼音缩写看起来不直观，老半天也不知道到底这个字段是干什么的）

(2)系统中所有属于内码，即仅用于标识唯一性和程序内部用到的标识性字段，字段名称建议取为 ID ，采用类型为整型或长整型.

(3)系统中属于是业务内的编号字段，代表一定业务信息，建议字段命名为
code , 如工作单编号
wf_code .

(4) 不要在数据库表字段（列名）中包含数据类型，如：datetime

(5)不要在数据库表字段（列名）命名时重复表名，可以使用表名首字母（不包含数据库表名前缀）

注意：
不要在数据库表字段（列名）命名时
不建议使用数据库关键字,如：name,time,datetime password 等

 

3.表设计规范：

(1)所有字段在设计时，除以下数据类型timestamp、image、datetime、smalldatetime、uniqueidentifier、binary、sql_variant、binary、varbinary外，必须有默认值。字符型的默认值为一个空字符值串’’；数值型的默认值为数值0；逻辑型的默认值为数值0；

其中：系统中所有逻辑型中数值0表示为“假”；数值1表示为“真”。


datetime、smalldatetime类型的字段没有默认值，必须为NULL。

(2)当字段定义为字符串形时建议使用varchar而不用nvarchar。

注
：在MySQL5.0以上的版本中，varchar数据类型的长度支持到了65535，也就是说可以存放65532个字节的数据，起始位和结束位占去了3个
字节。

(3)建议在大多数表中（如工作单），应都有以下字段：

字段名说明类型默认值

CreatorID创建者int
默认值为
0

CreatedTime创建时间Datetime
默认值为NULL

(4)字段的描述

a.字段必须填写描述信息（注释）

b.尽量遵守第三范式的标准（3NF）

表内的每一个值只能被表达一次（列名不重复）

表内的每一行都应当被唯一的标示（标识唯一性，如
自动增长
主键）

表内不应该存储依赖于其他键的非键信息

(5)加索引规则

a.表建好后数据库自动为表生成一个索引（为
自动增长的列生成唯一索引），如果在对这列添加索引，数据库会给一个警告,内容大概是，已经为这列添加了索引，建议修改索引名称和自动增长列名保持一致，为了方便使用。

b.如果在添加索引时，建议索引名称和数据库列名保持一致，为了方便使用

c.如果字段事实上是与其它表的关键字相关联而未设计为外键引用，需建索引。

d.如果字段与其它表的字段相关联，需建索引。

e.如果字段需做模糊查询之外的条件查询，需建索引。

f.除了主关键字允许建立簇索引外，其它字段所建索引必须为非簇索引。

 

4.存储过程命名规范

(1)
存贮过程的命名请遵循以下命名规范：USP_+ 系统模块缩写（与表前缀类似）+_+ 功能标识 + 代表存贮过程操作的主要表名（不带前缀）或功能的英文单词或英文单词缩写。

如果一个存贮过程只对一个表进行操作，建议存贮过程的名称就用存贮过程所操作的表的表名（不带前缀）。这样有利于根据表名找到相应的存贮过程。例如：

用于新增的存贮过程USP_MESSAGE_Add_Model

用于修改的存贮过程USP_ MESSAGE_Upt_Model

用于删除的存贮过程USP_ MESSAGE_Del_ Modele

注：USP是user storedprocedure
缩写

5.存储过程设计规范

在存贮过程中必须说明以下内容：

(1)目的：说明此存贮过程的作用。

(2)作者：首次创建此存贮过程的人的姓名。在此请使用中文全名，不允许使用英文简称。

(3)创建日期：创建存贮过程时的日期。

(4)修改记录：

修改记录需包含修改顺序号、修改者、修改日期、修改原因，修改时不能直接在原来的代码上修改，也不能删除原来的代码，只能先将原来的代码注释掉，再重新增加正确的代码。修改顺序号的形式为：log1，log2，log3。。。，根据修改次数顺序增加，同时在注释掉的原来的代码块和新增的正确代码块前后注明修改顺序号。

(5)对存贮过程各参数及变量的中文注解。

建议：在数据库中创建一个文本文件保存创建脚本

 

6.视图命名规范

视图的命名请遵循以下命名规范：UV _ + 系统模块缩写（与表前缀类似）+_+ 功能标识 + 代表视图查询的主要表名（不带前缀）或功能的英文单词或英文单词缩写。

如果一个视图只对一个表进行查询，建议视图的名称就用视图所查询的表的表名（不带前缀）。这样有利于根据表名找到相应的视图。

注：UV是userView缩写

7.视图设计规范

在视图中必须说明以下内容：

(1)目的：说明此视图的作用。

(2)创建者：首次创建此视图的人的姓名。在此请使用中文全名，不允许使用英文简称。

(3)修改者、修改日期、修改原因：如果有人对此视图进行了修改，则必须在此视图的前面加注修改者姓名、修改日期及修改原因。

(4)对视图各参数及变量的中文注解

建议：在数据库中创建一个文本文件保存创建脚本

8.触发器命名规范

Insert触发器加'_i'，Delete触发器加'_d'，Update触发器加'_u'

9.触发器设计规范

在视图中必须说明以下内容：

(1)目的：说明此触发器的作用。

(2)创建者：首次创建此触发器的人的姓名。在此请使用中文全名，不允许使用英文简称。

(3)修改者、修改日期、修改原因：如果有人对此触发器进行了修改，则必须在此触发器的前面加注修改者姓名、修改日期及修改原因。

(4)对触发器各参数及变量的中文注解

建议：在数据库中创建一个文本文件保存创建脚本
