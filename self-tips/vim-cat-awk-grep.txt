下一单词：w
下一个空格后的单词：W
上一个单词：b
上一个空格后的单词：B
下一个空格前的单词: E
行末：$
行首：^
下半页：ctrl+d
上半页：ctrl+u
下一行；ctrl+e
上一行：ctrl+y
下一页：ctrl+b
查看的行居中: zz

空格：\s

行末空格：\s\+$
行首空格：^\s\+
CTRL-^ 打开之前编辑的文件
查看缓冲区: :ls
缓冲区内的文件 :e#


删除tab后的所有内容： :%s/\t.*//
删除行尾多个空格 : %s/\s\+$//g
删除行首多个空格 : %s/^ \+//g
16进制显示binary文件： vim打开后:%!xxd
i2进制显示binary文件： vim打开后:%!xxd -b
匹配删除：
删除含有“#”开头的行：:% g/^#/d
删除空行： :% g/^$/d
删除不含该字符串的行： :% v/pattern/d  或g!/pattern/d
删除包含特定字符的行：g/pattern/d
在行末增加" : :%s/$/"/g
在行首增加" : :%s/^/"/g
对每行只保留匹配内容而删除这一行中的其它内容： :%s/^.*\(pattern\).*$/\1/g
删除包含特定字符串的行： :g/pattern/d
删除包含特定字符串的行,每次删除前都提示： :%s/^.*pattern.*\n//c
处理字符串: /123/456/789/109/example.txt, 怎么删除到最后一个/,然后得到example.txt ?： 0dte ， 说明：0     到行首，    dte   删到第一个e
处理字符串: /123/456/789/ef/109/example.txt, 怎么删除到最后一个/,然后得到example.txt ? $T/d0 ,说明：$     到行尾, T/    从后往前搜到第一个/,d0    删到行首
处理字符串: /123/456/789/ef/109/example.txt, 怎么删除到最后一个/,然后得到example.txt ? d/ex然后回车, 说明：d     删除, /ex   搜到第一个ex

用,替换换行: 1,$s/\n/,/g
替换前询问： /gc
检查json语法对不对: :setf json
范围替换： :5,12s/foo/bar/g
当前行.与接下来两行+2：
:.,+2s/foo/bar/g
查看进程内的线程：ps -T -p pid, top -H -p pid 可查看各个线程占用的资源
替换某行的所有内容:%s/aaa/bbb/e
将某文本内的行按ascii码排序： sort file
忽略大小写： :set ic (:set ignorecase)
大小写敏感: :set noic
vim中显示当前文件的路径及名称: control + G
只匹配词尾： /int\>
只匹配词头：\< int
全词匹配： /\< int\>
统计关键词个数： :%s/pattern/&/g 　& 代表的意思就是用来表示前面比对的字串，所以做这个指令其实对档案本身并不会有什麽改变。但是由於做的是全域的取代置换， vim 会告诉你有从多少行中多少个字串被取代。


以二进制打开文件: vim -b filename, 以16进制显示： :set display=uhex


linux文本处理相关命令：
去重：shell下执行：sort -u a.txt -o b.txt
统计重复行：sort a.txt |uniq -dc
对比两个log，不对比第二个字段： tail -5 install.log.syslog |uniq -f 1


tr： 替换字段
找出文件1和文件2相同的行：cat resmap.log2 unique_extractkey.log | sort | uniq -d | sort -n
将文档中的","替换成回车: cat ip-lxj.txt | tr , '\n' > a.txt
mac使用find和sed： find ./ -type f -exec sed -i '' -e "s/192.168.20.1/new.domain.com/" {} \; 与linux不同在于增加了-i '' -e

sed清除行尾空格: sed -i '' -e "s/[ \t]*$//"
删除行头空格键和tab键: sed 's/^[ \t]*//g' (^[  \t]，是以空格或者tab键开头；与【^】不同，【^】是匹配除【^字符】之外的任意字符，例如5【^12】，匹配50、53、54，但是不匹配51和52)

set 当替换的内容有/时，需要使用sed "s#find#$REPLACE#"

格式化json: :%!python -m json.tool
.h,.cpp互相切换： :e %:r.cpp

vim替换soh分隔符（显示为^A）：直接搜索^A搜不到，需要control+v, 再control+A得到该符号
字符串查找时，”\n” 是换行，”\r” 是回车，也就是经常会看到的 ^M（备注-1）。
字符串替换时，”\r” 是换行，’\n” 是空字符（0×00）。


ctags:
生成tags： ctags -R
加载tag: set tags=绝对路径的tag
跳转到函数定义： control + ]
跳回前文： control + o ; control + t
查看所有的tags:  :ts   （助记 tags list）


awk的时候使用:分隔符 awk -F:
awk的时候使用tab分隔符 awk -F'\t'
awk某个文件  awk -f filename


grep:
排除某些文件夹: grep --exclude-dir



